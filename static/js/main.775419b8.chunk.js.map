{"version":3,"sources":["logo.svg","components/picturecard/PictureCard.js","components/wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","PictureCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","clickPicture","id","Wrapper","shakeWrapper","pictures","App","state","cards","clickedArray","topScore","score","message","shakeit","shuffledArray","_this","shuffleArray","setState","includes","concat","picturesArray","i","length","j","Math","floor","random","_ref","_this2","this","logo","messgae","components_wrapper_Wrapper","map","picture","components_picturecard_PictureCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uqEAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qRCUzBC,eAPK,SAAAC,GAAK,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BAA+BC,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,QAAS,kBAAMT,EAAMU,aAAaV,EAAMW,WCDnHC,SAFE,SAAAZ,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAkC,SAAvBJ,EAAMa,aAA0B,eAAiB,WAAYb,EAAMc,mBCuE9FC,6MAlEbC,MAAQ,CACNC,QACAC,aAAc,GACdC,SAAU,EACVC,MAAO,EACPC,QAAS,GACTC,QAAS,WAEXZ,aAAe,SAAAC,GACb,IAAMY,EAAgBC,EAAKC,aAAaR,GACxCO,EAAKE,SAAS,CAACT,MAAOM,IACfC,EAAKR,MAAME,aAAaS,SAAShB,GAClCa,EAAKE,SAAS,CAAEN,MAAO,EAAGF,aAAc,GAAIG,QAAS,uDAAwDC,QAAS,SAEtHE,EAAKE,SAAS,CAACR,aAAcM,EAAKR,MAAME,aAAaU,OAAO,CAACjB,IAC3DS,MAAOI,EAAKR,MAAMI,MAAQ,EAC1BC,QAAS,WACTC,SAAS,IAGVE,EAAKR,MAAMI,MAAOI,EAAKR,MAAMG,UAC9BK,EAAKE,SAAS,CAACP,SAAUK,EAAKR,MAAMI,WAG5CK,aAAe,SAACI,GACd,IAAI,IAAIC,EAAE,EAAGA,EAAED,EAAcE,OAAQD,IAAI,CACvC,IAAME,EAAGC,KAAKC,MAAMD,KAAKE,UAAYL,EAAE,IADAM,EAED,CAACP,EAAcG,GAAIH,EAAcC,IAAtED,EAAcC,GAFwBM,EAAA,GAErBP,EAAcG,GAFOI,EAAA,GAIzC,OAAOP,2EAEA,IAAAQ,EAAAC,KACP,OACIrC,EAAAC,EAAAC,cAAA,OAAKC,UAAY,OACfH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKI,IAAKgC,IAAMnC,UAAU,WAAWC,IAAI,SACzCJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,mCAEFH,EAAAC,EAAAC,cAAA,MAAIC,UAAY,aACdH,EAAAC,EAAAC,cAAA,mFACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAAQH,EAAAC,EAAAC,cAAA,uBAAemC,KAAKtB,MAAMI,MAA1B,eAA6CkB,KAAKtB,MAAMG,WAC7ElB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAUH,EAAAC,EAAAC,cAAA,cAASmC,KAAKtB,MAAMwB,WAE7CvC,EAAAC,EAAAC,cAACsC,EAAD,CACI5B,aAAgByB,KAAKtB,MAAMM,QAC3BR,SACCwB,KAAKtB,MAAMC,MAAMyB,IAAI,SAAAC,GAAO,OACzB1C,EAAAC,EAAAC,cAACyC,EAAD,CACGlC,aAAc2B,EAAK3B,aACnBC,GAAIgC,EAAQhC,GACfkC,IAAKF,EAAQhC,GACbL,KAAMqC,EAAQrC,KACdE,MAAOmC,EAAQnC,YAInBP,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,mDA3DN0C,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.775419b8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport \"./PictureCard.css\";\r\n\r\nconst PictureCard = props => (\r\n    <div className=\"card\">\r\n     <div className=\"img-container\">\r\n         <img className=\"img-thumbnail img-responsive\" alt={props.name} src={props.image} onClick={() => props.clickPicture(props.id)} />\r\n     </div>\r\n    </div>\r\n         );\r\nexport default PictureCard;\r\n\r\n","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper  = props => <div className={props.shakeWrapper === 'true' ? \"wrapperShake\" : \"wrapper\"}>{props.pictures}</div>\r\n\r\nexport default Wrapper;\r\n","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport PictureCard from \"./components/picturecard\";\r\nimport Wrapper from \"./components/wrapper\";\r\nimport cards from \"./cards.json\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    cards,\r\n    clickedArray: [],\r\n    topScore: 0,\r\n    score: 0,\r\n    message: \"\",\r\n    shakeit: \"false\"\r\n  };\r\n  clickPicture = id => {\r\n    const shuffledArray = this.shuffleArray(cards);\r\n    this.setState({cards: shuffledArray});\r\n        if(this.state.clickedArray.includes(id)){\r\n          this.setState({ score: 0, clickedArray: [], message: \"Incorrect!! game over click an image to start again!\", shakeit: \"true\"});\r\n        } else {\r\n          this.setState({clickedArray: this.state.clickedArray.concat([id]),\r\n            score: this.state.score + 1,\r\n            message: \"correct!\",\r\n            shakeit: false\r\n          });\r\n        }\r\n        if(this.state.score >this.state.topScore){\r\n          this.setState({topScore: this.state.score});\r\n        }\r\n  }\r\n  shuffleArray = (picturesArray) => {\r\n    for(let i=0; i<picturesArray.length; i++){\r\n      const j= Math.floor(Math.random() * (i+1));\r\n      [picturesArray[i],picturesArray[j]] = [picturesArray[j], picturesArray[i]];\r\n    }\r\n    return picturesArray;\r\n  }\r\n  render() {\r\n    return (\r\n        <div className = \"App\">\r\n          <header className=\"App-header\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <h1 className=\"App-title\">Welcome to React Clicky Game!!</h1>\r\n          </header>\r\n          <h3 className = \"App-intro\">\r\n            <strong>Click Image to earn points,but don't click on any,more than once!</strong>\r\n              <p className=\"score\"><strong>score:{this.state.score} | TopScore:{this.state.topScore}</strong></p>\r\n              <p className=\"message\"><strong>{this.state.messgae}</strong></p>\r\n          </h3>\r\n            <Wrapper\r\n                shakeWrapper = {this.state.shakeit}\r\n                pictures =\r\n                {this.state.cards.map(picture => (\r\n                    <PictureCard\r\n                       clickPicture={this.clickPicture}\r\n                       id={picture.id}\r\n                    key={picture.id}\r\n                    name={picture.name}\r\n                    image={picture.image}\r\n                    />\r\n                ))}\r\n                />\r\n                <footer className=\"footer\">\r\n                    <div className=\"container\">\r\n                        <span className=\"text\">&copy;Lalitha - ClickyGame - React app.</span>\r\n                    </div>\r\n                </footer>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}